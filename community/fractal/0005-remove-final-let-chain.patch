From 4e62a5401e50483ebae2945c69125b3666614705 Mon Sep 17 00:00:00 2001
From: Matthias Ahouansou <matthias@ahouansou.cz>
Date: Tue, 12 Aug 2025 00:37:59 +0200
Subject: [PATCH 5/5] remove final let-chain

---
 crates/matrix-sdk-ui/src/timeline/mod.rs | 63 ++++++++++++------------
 1 file changed, 31 insertions(+), 32 deletions(-)

diff --git a/vendored/matrix-sdk/crates/matrix-sdk-ui/src/timeline/mod.rs b/vendored/matrix-sdk/crates/matrix-sdk-ui/src/timeline/mod.rs
index abc2ff2b2..0a94b6435 100644
--- a/vendored/matrix-sdk/crates/matrix-sdk-ui/src/timeline/mod.rs
+++ b/vendored/matrix-sdk/crates/matrix-sdk-ui/src/timeline/mod.rs
@@ -301,43 +301,42 @@ impl Timeline {
     pub async fn send(&self, mut content: AnyMessageLikeEventContent) -> Result<SendHandle, Error> {
         // If this is a room event we're sending in a threaded timeline, we add the
         // thread relation ourselves.
-        if content.relation().is_none()
-            && let Some(reply) = self.infer_reply(None).await
-        {
-            match &mut content {
-                AnyMessageLikeEventContent::RoomMessage(room_msg_content) => {
-                    content = self
-                        .room()
-                        .make_reply_event(
-                            // Note: this `.into()` gets rid of the relation, but we've checked
-                            // previously that the `relates_to` field wasn't
-                            // set.
-                            room_msg_content.clone().into(),
-                            reply,
-                        )
-                        .await?
-                        .into();
-                }
+        if content.relation().is_none() {
+            if let Some(reply) = self.infer_reply(None).await {
+                match &mut content {
+                    AnyMessageLikeEventContent::RoomMessage(room_msg_content) => {
+                        content = self
+                            .room()
+                            .make_reply_event(
+                                // Note: this `.into()` gets rid of the relation, but we've checked
+                                // previously that the `relates_to` field wasn't
+                                // set.
+                                room_msg_content.clone().into(),
+                                reply,
+                            )
+                            .await?
+                            .into();
+                    }
 
-                AnyMessageLikeEventContent::UnstablePollStart(
-                    UnstablePollStartEventContent::New(poll),
-                ) => {
-                    if let Some(thread_root) = self.controller.thread_root() {
-                        poll.relates_to = Some(RelationWithoutReplacement::Thread(Thread::plain(
-                            thread_root,
-                            reply.event_id,
-                        )));
+                    AnyMessageLikeEventContent::UnstablePollStart(
+                        UnstablePollStartEventContent::New(poll),
+                    ) => {
+                        if let Some(thread_root) = self.controller.thread_root() {
+                            poll.relates_to = Some(RelationWithoutReplacement::Thread(
+                                Thread::plain(thread_root, reply.event_id),
+                            ));
+                        }
                     }
-                }
 
-                AnyMessageLikeEventContent::Sticker(sticker) => {
-                    if let Some(thread_root) = self.controller.thread_root() {
-                        sticker.relates_to =
-                            Some(Relation::Thread(Thread::plain(thread_root, reply.event_id)));
+                    AnyMessageLikeEventContent::Sticker(sticker) => {
+                        if let Some(thread_root) = self.controller.thread_root() {
+                            sticker.relates_to =
+                                Some(Relation::Thread(Thread::plain(thread_root, reply.event_id)));
+                        }
                     }
-                }
 
-                _ => {}
+                    _ => {}
+                }
             }
         }
 
-- 
2.49.1

